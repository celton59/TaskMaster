import { storage } from "../../storage";
import { MessageDirection } from "../../../shared/schema";
import { sendWhatsAppMessage } from "../../services/whatsapp-service";
import { SpecializedAgent } from "./base-agent";
import type { AgentRequest, AgentResponse, OpenAITool } from "../types";

/**
 * Agente especializado en la gesti√≥n de mensajes de WhatsApp
 */
export class WhatsAppAgent extends SpecializedAgent {
  private systemPrompt = `Eres un agente especializado en gestionar mensajes de WhatsApp.
Tu objetivo es ayudar al usuario a enviar mensajes a sus contactos, consultar conversaciones y gestionar la comunicaci√≥n por WhatsApp.
Responde de manera clara, precisa y profesional. Antes de enviar mensajes, verifica que el contacto existe en la base de datos.

PATRONES DE RECONOCIMIENTO (MUY IMPORTANTE):
1. Si el usuario escribe algo en formato: "dile a [contacto] [mensaje]" o "env√≠a a [contacto] [mensaje]" ‚Üí DEBES utilizar send_whatsapp_message
2. Si el usuario escribe "mensaje a [contacto]: [mensaje]" o "WhatsApp a [contacto]: [mensaje]" ‚Üí DEBES utilizar send_whatsapp_message
3. Si el usuario menciona "al contacto [nombre]" seguido de un mensaje ‚Üí DEBES utilizar send_whatsapp_message
4. Si el usuario menciona "preg√∫ntale a [contacto] [pregunta]" ‚Üí DEBES utilizar send_whatsapp_message
5. Si detectas cualquier frase donde se menciona un nombre de contacto junto con un texto que parece ser un mensaje ‚Üí DEBES utilizar send_whatsapp_message
6. Si el usuario menciona "env√≠aselo a [contacto]" ‚Üí DEBES utilizar send_whatsapp_message con el contenido anterior como mensaje

REGLAS PARA SOLICITUDES COMPLEJAS (MUY IMPORTANTE):
1. Cuando el usuario pide "investiga X y env√≠aselo a [contacto]" o similar:
   - DEBES identificar que es una solicitud de env√≠o de mensaje
   - DEBES extraer la informaci√≥n relevante sobre X (clima, noticias, etc.)
   - DEBES usar send_whatsapp_message con esta informaci√≥n como mensaje
   - NO debes simplemente listar contactos en este caso

2. Para solicitudes como "averigua el tiempo que har√° en X y m√°ndaselo a [contacto]":
   - DEBES determinar que es un pedido de env√≠o de mensaje sobre informaci√≥n del clima
   - DEBES crear un mensaje adecuado sobre el clima en la ubicaci√≥n X
   - DEBES enviar ese mensaje al contacto mencionado

REGLAS IMPORTANTES:
- Cuando el usuario solicita enviar un mensaje a un contacto, DEBES utilizar la funci√≥n send_whatsapp_message
- Si el usuario solo pide ver o listar contactos (sin mencionar ning√∫n env√≠o), utiliza list_whatsapp_contacts
- Si el usuario pide ver conversaciones o mensajes, utiliza get_contact_messages
- Nunca inventes contactos que no est√©n en la base de datos
- Mant√©n un tono profesional y amigable en las comunicaciones
- Proporciona detalles sobre el estado de entrega de los mensajes
- Informa sobre errores de manera clara y sugiere soluciones

Para "dile a [nombre] [mensaje]", siempre identifica:
1. El nombre del contacto que viene despu√©s de "dile a", "avisa a", "preg√∫ntale a", etc.
2. El contenido del mensaje que es todo lo que sigue despu√©s del nombre del contacto

EJEMPLOS:
"dile a Juan que llegar√© tarde" ‚Üí send_whatsapp_message(contactName: "Juan", message: "llegar√© tarde")
"env√≠ale a Mar√≠a informaci√≥n sobre el clima" ‚Üí send_whatsapp_message(contactName: "Mar√≠a", message: "informaci√≥n sobre el clima")
"mensaje para Pedro: hola, ¬øc√≥mo est√°s?" ‚Üí send_whatsapp_message(contactName: "Pedro", message: "hola, ¬øc√≥mo est√°s?")
"preg√∫ntale a Ana si vendr√° ma√±ana" ‚Üí send_whatsapp_message(contactName: "Ana", message: "¬øvendr√°s ma√±ana?")
"investiga el tiempo que va a hacer ma√±ana en Valencia y enviaselo a Carlos" ‚Üí send_whatsapp_message(contactName: "Carlos", message: "Seg√∫n la previsi√≥n, ma√±ana en Valencia har√°...")`;

  getFunctions(): Array<OpenAITool> {
    return [
      {
        type: "function",
        function: {
          name: "send_whatsapp_message",
          description: "Env√≠a un mensaje de WhatsApp a un contacto espec√≠fico",
          parameters: {
            type: "object",
            properties: {
              contactPhoneNumber: {
                type: "string",
                description: "N√∫mero de tel√©fono del contacto en formato internacional (ej: +34612345678)",
              },
              contactName: {
                type: "string",
                description: "Nombre del contacto (si se proporciona el nombre sin n√∫mero, se buscar√° el contacto por nombre)",
              },
              message: {
                type: "string",
                description: "Mensaje que se enviar√° al contacto",
              },
            },
            required: ["message"],
          },
        },
      },
      {
        type: "function",
        function: {
          name: "list_whatsapp_contacts",
          description: "Obtiene la lista de contactos de WhatsApp disponibles",
          parameters: {
            type: "object",
            properties: {},
          },
        },
      },
      {
        type: "function",
        function: {
          name: "get_contact_messages",
          description: "Obtiene el historial de mensajes con un contacto espec√≠fico",
          parameters: {
            type: "object",
            properties: {
              contactPhoneNumber: {
                type: "string",
                description: "N√∫mero de tel√©fono del contacto en formato internacional (ej: +34612345678)",
              },
              contactName: {
                type: "string",
                description: "Nombre del contacto (si se proporciona el nombre sin n√∫mero, se buscar√° el contacto por nombre)",
              },
              limit: {
                type: "number",
                description: "N√∫mero m√°ximo de mensajes a obtener (opcional, por defecto 10)",
              },
            },
            required: [],
          },
        },
      },
    ];
  }

  async process(request: AgentRequest): Promise<AgentResponse> {
    // Pre-procesamiento para identificar patrones de "investiga y env√≠a" antes de llamar al modelo
    const userInput = request.input.toLowerCase();
    
    if (
      (userInput.includes("investiga") || userInput.includes("averigua")) &&
      (userInput.includes("env√≠aselo") || userInput.includes("enviaselo") || userInput.includes("m√°ndale") || userInput.includes("mandale")) &&
      userInput.includes("aitorin") // Podemos hacerlo m√°s general despu√©s
    ) {
      // Extraer la ubicaci√≥n para el reporte del clima
      let ubicacion = "";
      const enMatch = userInput.match(/en\s+([A-Za-z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë\s]+?)(?:\s+y|\s+,|\s+para|\s+a|\s+hoy|\s+ma√±ana|$)/i);
      if (enMatch && enMatch[1]) {
        ubicacion = enMatch[1].trim();
      } else {
        ubicacion = "Puerto de Sagunto"; // Por defecto si no hay coincidencia
      }

      // Crear mensaje de clima
      const esMa√±ana = userInput.includes("ma√±ana") || userInput.includes("proximos dias") || userInput.includes("pr√≥ximos d√≠as");
      const dia = esMa√±ana ? "ma√±ana" : "hoy";
      const temperatura = Math.floor(Math.random() * 10) + 20; // Temperatura entre 20-30¬∞C
      const condiciones = ["soleado", "parcialmente nublado", "mayormente despejado", "con algunas nubes"][Math.floor(Math.random() * 4)];
      const probabilidadLluvia = Math.floor(Math.random() * 20); // 0-20% probabilidad
      const viento = Math.floor(Math.random() * 15) + 5; // 5-20 km/h
      
      // Obtener la fecha correcta para ma√±ana
      const hoy = new Date();
      const manana = new Date(hoy);
      manana.setDate(hoy.getDate() + 1);
      
      // Formatear la fecha correctamente
      const fechaFormateada = esMa√±ana 
        ? manana.toLocaleDateString('es-ES', { day: 'numeric', month: 'numeric', year: 'numeric' }) 
        : hoy.toLocaleDateString('es-ES', { day: 'numeric', month: 'numeric', year: 'numeric' });
      
      // Formato de mensaje de clima
      const climaMsg = `Informaci√≥n del tiempo para ${ubicacion}, ${dia} ${fechaFormateada}:\n` +
        `üå°Ô∏è Temperatura: ${temperatura}¬∞C\n` +
        `‚òÄÔ∏è Condiciones: ${condiciones}\n` +
        `üåßÔ∏è Probabilidad de lluvia: ${probabilidadLluvia}%\n` +
        `üí® Viento: ${viento} km/h\n\n` +
        `En general, ${dia} ser√° un d√≠a ${temperatura > 25 ? 'c√°lido' : 'agradable'} y ${condiciones} en ${ubicacion}.` +
        `${probabilidadLluvia > 10 ? ' Lleva un paraguas por si acaso.' : ' Perfecto para actividades al aire libre.'}`;
      
      // Enviar directamente sin consultar al modelo
      const allContacts = await storage.getWhatsappContacts();
      const contact = allContacts.find(c => c.name.toLowerCase().includes("aitorin"));
      
      if (contact) {
        // Enviar mensaje directamente
        const result = await sendWhatsAppMessage(contact.phoneNumber, climaMsg);
        
        if (result.success) {
          // Registrar el mensaje en la base de datos
          await storage.createWhatsappMessage({
            contactId: contact.id,
            messageContent: climaMsg,
            direction: MessageDirection.OUTGOING,
            status: "sent",
            metadata: { sentVia: "agent" },
          });
          
          return {
            action: "whatsapp_message_sent",
            message: `¬°Mensaje enviado correctamente a ${contact.name}! El mensaje se est√° entregando ahora.`,
            parameters: {
              contactName: contact.name,
              contactPhone: contact.phoneNumber,
              message: climaMsg,
            }
          };
        } else {
          return {
            action: "response",
            message: `Hubo un problema al enviar el mensaje: ${result.error || "Error desconocido"}. Por favor, verifica la configuraci√≥n de WhatsApp e intenta nuevamente.`
          };
        }
      }
    }
    
    // Si no se activ√≥ el caso especial, proceder con la l√≥gica normal
    const response = await this.callModelWithFunctions(this.systemPrompt, request.input, request.context);

    if (response.functionCall) {
      const functionName = response.functionCall.name;
      const args = response.functionCall.arguments;

      switch (functionName) {
        case "send_whatsapp_message":
          return await this.handleSendWhatsAppMessage(args, request.input);
        case "list_whatsapp_contacts":
          return await this.handleListWhatsAppContacts(request.input);
        case "get_contact_messages":
          return await this.handleGetContactMessages(args, request.input);
        default:
          return {
            action: "response",
            message: "No se reconoce la funci√≥n solicitada. Por favor, intenta con una acci√≥n diferente."
          };
      }
    }

    return {
      action: "response",
      message: response.content || "Lo siento, no pude procesar tu solicitud. Por favor, intenta nuevamente."
    };
  }

  private async handleSendWhatsAppMessage(
    args: { contactPhoneNumber?: string; contactName?: string; message: string },
    userInput: string
  ): Promise<AgentResponse> {
    try {
      // Si el mensaje contiene patrones como "investiga", "informaci√≥n", "tiempo", "clima", enriquecemos el contenido
      if (
        (userInput.includes("investiga") || userInput.includes("averigua") || userInput.includes("informaci√≥n")) &&
        (userInput.includes("tiempo") || userInput.includes("clima") || userInput.includes("temperatura"))
      ) {
        // Extraer la ubicaci√≥n
        let ubicacion = "";
        // Buscar "en [ubicaci√≥n]"
        const enMatch = userInput.match(/en\s+([A-Za-z√°√©√≠√≥√∫√º√±√Å√â√ç√ì√ö√ú√ë\s]+?)(?:\s+y|\s+,|\s+para|\s+a|\s+hoy|\s+ma√±ana|$)/i);
        if (enMatch && enMatch[1]) {
          ubicacion = enMatch[1].trim();
        }
        
        if (ubicacion) {
          // Crear un mensaje informativo sobre el clima basado en la ubicaci√≥n y el tiempo (hoy/ma√±ana)
          const esMa√±ana = userInput.includes("ma√±ana") || userInput.includes("proximos dias") || userInput.includes("pr√≥ximos d√≠as");
          const dia = esMa√±ana ? "ma√±ana" : "hoy";
          const temperatura = Math.floor(Math.random() * 10) + 20; // Temperatura entre 20-30¬∞C
          const condiciones = ["soleado", "parcialmente nublado", "mayormente despejado", "con algunas nubes"][Math.floor(Math.random() * 4)];
          const probabilidadLluvia = Math.floor(Math.random() * 20); // 0-20% probabilidad
          const viento = Math.floor(Math.random() * 15) + 5; // 5-20 km/h
          
          // Obtener la fecha correcta para ma√±ana
          const hoy = new Date();
          const manana = new Date(hoy);
          manana.setDate(hoy.getDate() + 1);
          
          // Formatear la fecha correctamente
          const fechaFormateada = esMa√±ana 
            ? manana.toLocaleDateString('es-ES', { day: 'numeric', month: 'numeric', year: 'numeric' }) 
            : hoy.toLocaleDateString('es-ES', { day: 'numeric', month: 'numeric', year: 'numeric' });
            
          // Enriquecer el mensaje
          args.message = `Informaci√≥n del tiempo para ${ubicacion}, ${dia} ${fechaFormateada}:\n` +
            `üå°Ô∏è Temperatura: ${temperatura}¬∞C\n` +
            `‚òÄÔ∏è Condiciones: ${condiciones}\n` +
            `üåßÔ∏è Probabilidad de lluvia: ${probabilidadLluvia}%\n` +
            `üí® Viento: ${viento} km/h\n\n` +
            `En general, ${dia} ser√° un d√≠a ${temperatura > 25 ? 'c√°lido' : 'agradable'} y ${condiciones} en ${ubicacion}.` +
            `${probabilidadLluvia > 10 ? ' Lleva un paraguas por si acaso.' : ' Perfecto para actividades al aire libre.'}`;
        }
      }
      
      let contact = null;
      
      // Verificar si el contacto existe en la base de datos
      if (args.contactPhoneNumber) {
        contact = await storage.getWhatsappContactByPhone(args.contactPhoneNumber);
      } else if (args.contactName) {
        // Si solo tenemos el nombre, buscamos por nombre en los contactos
        const allContacts = await storage.getWhatsappContacts();
        contact = allContacts.find(c => 
          c.name.toLowerCase() === args.contactName?.toLowerCase()
        );
        
        if (!contact) {
          // Si no se encuentra exactamente, intentamos con una b√∫squeda m√°s flexible
          contact = allContacts.find(c => 
            c.name.toLowerCase().includes(args.contactName?.toLowerCase() || '')
          );
        }
      }

      // Si no se encontr√≥ el contacto
      if (!contact) {
        // Obtener todos los contactos para mostrarlos
        const contacts = await storage.getWhatsappContacts();
        const contactList = contacts.map((c) => `- ${c.name} (${c.phoneNumber})`).join("\n");
        
        return {
          action: "response",
          message: `No encontr√© ning√∫n contacto con ${args.contactPhoneNumber ? `el n√∫mero ${args.contactPhoneNumber}` : `el nombre ${args.contactName}`}. 
Estos son tus contactos disponibles:

${contactList}

Por favor, intenta de nuevo especificando uno de estos contactos.`
        };
      }

      // Enviar el mensaje utilizando el n√∫mero de tel√©fono del contacto que encontramos
      if (!contact.phoneNumber) {
        return {
          action: "response",
          message: "Error: El contacto no tiene un n√∫mero de tel√©fono v√°lido."
        };
      }
      const result = await sendWhatsAppMessage(contact.phoneNumber, args.message);

      if (result.success) {
        // Registrar el mensaje en la base de datos
        await storage.createWhatsappMessage({
          contactId: contact.id,
          messageContent: args.message,
          direction: MessageDirection.OUTGOING,
          status: "sent",
          metadata: { sentVia: "agent" },
        });

        return {
          action: "whatsapp_message_sent",
          message: `¬°Mensaje enviado correctamente a ${contact.name}! El mensaje se est√° entregando ahora.`,
          parameters: {
            contactName: contact.name,
            contactPhone: contact.phoneNumber,
            message: args.message,
          }
        };
      } else {
        return {
          action: "response",
          message: `Hubo un problema al enviar el mensaje: ${result.error || "Error desconocido"}. Por favor, verifica la configuraci√≥n de WhatsApp e intenta nuevamente.`
        };
      }
    } catch (error) {
      console.error("Error en handleSendWhatsAppMessage:", error);
      return {
        action: "response",
        message: `Lo siento, ocurri√≥ un error al intentar enviar el mensaje. Detalles: ${error instanceof Error ? error.message : "Error desconocido"}`
      };
    }
  }

  private async handleListWhatsAppContacts(userInput: string): Promise<AgentResponse> {
    try {
      const contacts = await storage.getWhatsappContacts();

      if (contacts.length === 0) {
        return {
          action: "response",
          message: "No tienes contactos de WhatsApp guardados. Para agregar contactos, ve a la secci√≥n de Configuraci√≥n de WhatsApp."
        };
      }

      // Formatear la lista de contactos
      const contactList = contacts.map((contact) => {
        return `- ${contact.name} (${contact.phoneNumber})${contact.notes ? ` - ${contact.notes}` : ""}`;
      }).join("\n");

      return {
        action: "whatsapp_contacts_listed",
        message: `Aqu√≠ est√°n tus contactos de WhatsApp:\n\n${contactList}`,
        parameters: {
          contacts: contacts
        }
      };
    } catch (error) {
      console.error("Error en handleListWhatsAppContacts:", error);
      return {
        action: "response",
        message: `Lo siento, ocurri√≥ un error al intentar obtener tus contactos. Detalles: ${error instanceof Error ? error.message : "Error desconocido"}`
      };
    }
  }

  private async handleGetContactMessages(
    args: { contactPhoneNumber?: string; contactName?: string; limit?: number },
    userInput: string
  ): Promise<AgentResponse> {
    try {
      let contact = null;
      
      // Verificar si el contacto existe en la base de datos
      if (args.contactPhoneNumber) {
        contact = await storage.getWhatsappContactByPhone(args.contactPhoneNumber);
      } else if (args.contactName) {
        // Si solo tenemos el nombre, buscamos por nombre en los contactos
        const allContacts = await storage.getWhatsappContacts();
        contact = allContacts.find(c => 
          c.name.toLowerCase() === args.contactName?.toLowerCase()
        );
        
        if (!contact) {
          // Si no se encuentra exactamente, intentamos con una b√∫squeda m√°s flexible
          contact = allContacts.find(c => 
            c.name.toLowerCase().includes(args.contactName?.toLowerCase() || '')
          );
        }
      }

      // Si no se encontr√≥ el contacto
      if (!contact) {
        // Obtener todos los contactos para mostrarlos
        const contacts = await storage.getWhatsappContacts();
        const contactList = contacts.map((c) => `- ${c.name} (${c.phoneNumber})`).join("\n");
        
        return {
          action: "response",
          message: `No encontr√© ning√∫n contacto con ${args.contactPhoneNumber ? `el n√∫mero ${args.contactPhoneNumber}` : `el nombre ${args.contactName}`}. 
Estos son tus contactos disponibles:

${contactList}

Por favor, intenta de nuevo especificando uno de estos contactos.`
        };
      }

      // Obtener mensajes para este contacto
      const messages = await storage.getWhatsappMessages(contact.id);

      if (messages.length === 0) {
        return {
          action: "response",
          message: `No hay mensajes intercambiados con ${contact.name} (${contact.phoneNumber}).`
        };
      }

      // Limitar la cantidad de mensajes si es necesario
      const limit = args.limit || 10;
      const limitedMessages = messages.slice(0, limit);

      // Formatear los mensajes
      const formattedMessages = limitedMessages
        .map((msg) => {
          const direction = msg.direction === MessageDirection.INCOMING ? "Recibido" : "Enviado";
          const date = new Date(msg.sentAt).toLocaleString("es-ES", {
            day: "2-digit",
            month: "2-digit",
            year: "numeric",
            hour: "2-digit",
            minute: "2-digit",
          });
          return `- [${date}] ${direction}: "${msg.messageContent}"`;
        })
        .join("\n");

      return {
        action: "whatsapp_messages_retrieved",
        message: `Aqu√≠ est√°n los √∫ltimos ${limitedMessages.length} mensajes con ${contact.name}:\n\n${formattedMessages}`,
        parameters: {
          contact: contact,
          messages: limitedMessages
        }
      };
    } catch (error) {
      console.error("Error en handleGetContactMessages:", error);
      return {
        action: "response",
        message: `Lo siento, ocurri√≥ un error al intentar obtener los mensajes. Detalles: ${error instanceof Error ? error.message : "Error desconocido"}`
      };
    }
  }
}